---
description: 
globs: 
alwaysApply: true
---
# Dify Halo Plugin - Cursor Rules

## Project Overview
This is a Dify plugin for integrating with Halo CMS, providing AI-powered blog management capabilities including article CRUD operations and moment creation.

## Architecture Requirements

### Module Structure
- Follow the modular architecture defined in `doc/02-architecture-design.md`
- Core modules: `auth/`, `api/`, `tools/`, `utils/`, `models/`
- Each module must have clear separation of concerns
- Use dependency injection for better testability

### Directory Structure
```
halo_plugin/
├── __init__.py
├── auth/
│   ├── __init__.py
│   ├── authenticator.py
│   └── token_manager.py
├── api/
│   ├── __init__.py
│   ├── client.py
│   └── endpoints.py
├── tools/
│   ├── __init__.py
│   ├── setup_tool.py
│   ├── post_tools.py
│   └── moment_tools.py
├── utils/
│   ├── __init__.py
│   ├── validators.py
│   └── formatters.py
├── models/
│   ├── __init__.py
│   ├── post.py
│   └── moment.py
└── exceptions.py
```

## Coding Standards

### Python Style Guide
- Follow PEP 8 style guide strictly
- Use Black formatter with line length 88
- Use isort for import sorting
- Maximum line length: 88 characters
- Use type hints for all function parameters and return types
- Follow Google-style docstrings

### Naming Conventions
- Classes: PascalCase (e.g., `HaloAuthenticator`)
- Functions/methods: snake_case (e.g., `setup_connection`)
- Constants: UPPER_SNAKE_CASE (e.g., `DEFAULT_TIMEOUT`)
- Variables: snake_case (e.g., `base_url`)
- Private methods: prefix with underscore (e.g., `_validate_token`)

### Import Organization
```python
# Standard library imports
import os
import json
from typing import Dict, List, Optional

# Third-party imports
import requests
from pydantic import BaseModel

# Local imports
from .exceptions import HaloPluginError
from .models import Post, Moment
```

## Testing Requirements

### Test Coverage
- Minimum 90% code coverage required
- All public methods must have unit tests
- Integration tests for API endpoints
- Mock external dependencies (Halo API calls)

### Test Structure
- Use pytest as testing framework
- Test files in `tests/` directory
- Test file naming: `test_<module_name>.py`
- Test class naming: `Test<ClassName>`
- Test method naming: `test_<method_name>_<scenario>`

### Example Test Structure
```python
# tests/test_auth.py
import pytest
from unittest.mock import Mock, patch
from halo_plugin.auth.authenticator import HaloAuthenticator

class TestHaloAuthenticator:
    def test_authenticate_success(self):
        # Test successful authentication
        pass
    
    def test_authenticate_invalid_token(self):
        # Test authentication with invalid token
        pass
```

## Security Requirements

### Token Management
- Never log sensitive information (tokens, passwords)
- Use secure storage for authentication tokens
- Implement token expiration handling
- Validate all input parameters

### Input Validation
- Validate all user inputs using Pydantic models
- Sanitize HTML content in blog posts
- Validate URLs and file paths
- Check file size limits for uploads

### Error Handling
- Never expose internal errors to users
- Log errors with appropriate severity levels
- Use custom exception classes from `exceptions.py`
- Provide meaningful error messages

## API Design Principles

### RESTful Design
- Follow REST conventions for API interactions
- Use appropriate HTTP methods (GET, POST, PUT, DELETE)
- Handle HTTP status codes properly
- Implement proper pagination for list endpoints

### Error Handling
```python
class HaloPluginError(Exception):
    """Base exception for Halo plugin errors."""
    pass

class AuthenticationError(HaloPluginError):
    """Raised when authentication fails."""
    pass

class ValidationError(HaloPluginError):
    """Raised when input validation fails."""
    pass
```

### Response Format
- Use consistent response formats
- Include proper error codes and messages
- Implement request/response logging
- Handle timeout and retry logic

## Tool Implementation Standards

### Dify Tool Requirements
- All tools must inherit from Dify's base tool class
- Implement proper parameter validation
- Use Pydantic models for input/output schemas
- Provide detailed tool descriptions and examples

### Tool Structure Template
```python
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field
from dify_plugin import Tool

class PostToolInput(BaseModel):
    post_id: str = Field(..., description="The ID of the post to retrieve")
    include_content: bool = Field(default=True, description="Whether to include post content")

class PostTool(Tool):
    name: str = "get_post"
    description: str = "Retrieve a specific blog post from Halo"
    parameters: PostToolInput
    
    def _invoke(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        # Implementation here
        pass
```

## Code Quality Requirements

### Documentation
- Every public class and method must have docstrings
- Include usage examples in docstrings
- Maintain README with setup instructions
- Document API endpoints and parameters

### Performance
- Implement connection pooling for HTTP requests
- Use async/await for I/O operations where appropriate
- Cache frequently accessed data
- Implement proper timeout handling

### Logging
```python
import logging

logger = logging.getLogger(__name__)

# Use appropriate log levels
logger.debug("Debug information")
logger.info("General information")
logger.warning("Warning message")
logger.error("Error occurred")
logger.critical("Critical error")
```

## Dependencies Management

### Core Dependencies
- `requests` for HTTP client
- `pydantic` for data validation
- `cryptography` for token encryption
- `pytest` for testing
- `black` for code formatting

### Version Constraints
- Python 3.8+ required
- Pin major versions in requirements.txt
- Use poetry or pip-tools for dependency management

## Configuration Management

### Environment Variables
```python
# Use environment variables for configuration
HALO_API_TIMEOUT = int(os.getenv("HALO_API_TIMEOUT", "30"))
HALO_MAX_RETRIES = int(os.getenv("HALO_MAX_RETRIES", "3"))
```

### Configuration Validation
- Validate all configuration on startup
- Provide sensible defaults
- Document all configuration options

## Deployment Requirements

### Package Structure
- Follow Python package best practices
- Include proper __init__.py files
- Implement setup.py or pyproject.toml
- Include all necessary metadata

### Distribution
- Create installable package
- Include dependency declarations
- Provide clear installation instructions
- Support pip installation

## Code Review Checklist

### Before Committing
- [ ] All tests pass
- [ ] Code coverage above 90%
- [ ] No linting errors
- [ ] Documentation updated
- [ ] Security review completed
- [ ] Performance impact assessed

### Review Focus Areas
- Error handling completeness
- Input validation coverage
- Security implications
- API design consistency
- Test quality and coverage
- Documentation accuracy

## Performance Guidelines

### Response Times
- API calls should complete within 30 seconds
- Implement timeout handling
- Use connection pooling
- Cache responses when appropriate

### Resource Usage
- Monitor memory usage in long-running operations
- Implement proper cleanup for resources
- Use generators for large data processing
- Optimize database queries

## Git Workflow

### Commit Messages
- Use conventional commit format
- Include scope and description
- Reference issue numbers
- Keep first line under 50 characters

### Branch Naming
- feature/description-of-feature
- bugfix/issue-number-description
- hotfix/critical-issue-description

## IDE Configuration

### VS Code Settings
```json
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.formatting.provider": "black",
    "python.sortImports.args": ["--profile", "black"]
}
```

## Troubleshooting

### Common Issues
- Authentication failures: Check token validity
- API timeouts: Implement retry logic
- Validation errors: Review input schemas
- Performance issues: Profile and optimize

### Debug Mode
- Enable detailed logging in development
- Use proper debug flags
- Implement health check endpoints
- Monitor API response times

## Compliance

### Data Privacy
- Handle user data according to privacy laws
- Implement data retention policies
- Secure data transmission
- Audit data access

### Licensing
- Respect third-party library licenses
- Include proper attribution
- Document licensing requirements
- Ensure compatibility

---

**Remember**: Always refer to the detailed documentation in `/doc` directory for comprehensive guidelines and implementation details. This file provides a quick reference for maintaining code quality and consistency. 